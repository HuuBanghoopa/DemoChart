@model DemoChart.Models.ChartViewModel
@{
    ViewData["Title"] = "Tạo biểu đồ";
}

<div class="container mt-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-5">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4>Nhập dữ liệu biểu đồ</h4>
                </div>
                <div class="card-body">
                    <form asp-action="GenerateChart" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <div class="mb-3">
                            <label asp-for="ChartTitle" class="form-label">Tiêu đề biểu đồ</label>
                            <input asp-for="ChartTitle" class="form-control" placeholder="Nhập tiêu đề biểu đồ" required>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ChartType" class="form-label">Loại biểu đồ</label>
                            <select asp-for="ChartType" class="form-select" id="chartTypeSelect">
                                <option value="bar">Biểu đồ cột (Bar)</option>
                                <option value="line">Biểu đồ đường (Line)</option>
                                <option value="pie">Biểu đồ tròn (Pie)</option>
                                <option value="doughnut">Biểu đồ tròn có lỗ (Doughnut)</option>
                                <option value="radar">Biểu đồ radar (Radar)</option>
                                <option value="polarArea">Biểu đồ cực (Polar Area)</option>
                                <option value="bubble">Biểu đồ bong bóng (Bubble)</option>
                                <option value="scatter">Biểu đồ phân tán (Scatter)</option>
                            </select>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Labels" class="form-label">Nhãn (cách nhau bởi dấu phẩy)</label>
                            <input asp-for="Labels" class="form-control" placeholder="VD: Tháng 1, Tháng 2, Tháng 3" required>
                            <small class="form-text text-muted">Ví dụ: Tháng 1, Tháng 2, Tháng 3</small>
                        </div>

                        <div class="mb-3">
                            <label asp-for="DataValues" class="form-label">Giá trị dữ liệu (cách nhau bởi dấu phẩy)</label>
                            <input asp-for="DataValues" class="form-control" placeholder="VD: 10, 20, 30" required>
                            <small class="form-text text-muted">Ví dụ: 10, 20, 30</small>
                        </div>

                        <div class="mb-3 form-check"> 
                             <input asp-for="ShowLegend" class="form-check-input" id="showLegendCheck"> 
                          <label asp-for="ShowLegend" class="form-check-label">Hiển thị chú thích</label> 
                        </div> 

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Vẽ biểu đồ</button>
                            <button type="submit" class="btn btn-success" formaction="@Url.Action("SaveChart")">Lưu biểu đồ</button>
                            <a asp-action="SavedCharts" class="btn btn-info">Xem biểu đồ đã lưu</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h4>@Html.Raw(Model.ChartTitle)</h4>
                </div>
                <div class="card-body">
                    <!-- Đã sửa: Thêm div container với chiều cao cố định cho canvas -->
                    <div style="height: 400px; width: 100%;">
                        <canvas id="myChart"></canvas>
                    </div>
                    <div class="mt-3 text-center">
                        <button id="downloadPNG" class="btn btn-secondary">Tải xuống PNG</button>
                        <button id="downloadJPG" class="btn btn-secondary">Tải xuống JPG</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let myChart;

        document.addEventListener('DOMContentLoaded', function () {
            // Lấy dữ liệu từ model
            const chartType = '@Model.ChartType';
            const chartTitle = '@Html.Raw(Model.ChartTitle)';
            const labelsInput = '@Html.Raw(Model.Labels)';
            const dataInput = '@Model.DataValues';
            const showLegend = @Json.Serialize(Model.ShowLegend);
            // Nếu có dữ liệu thì vẽ biểu đồ
            if (labelsInput && dataInput) {
                generateChart(chartType, chartTitle, labelsInput, dataInput, showLegend);
            }

            // Event listener cho nút tải xuống
            document.getElementById('downloadPNG').addEventListener('click', function() {
                downloadChart('png');
            });

            document.getElementById('downloadJPG').addEventListener('click', function() {
                downloadChart('jpg');
            });
        });

        function generateChart(chartType, chartTitle, labelsInput, dataInput, showLegend) {
            // Xóa biểu đồ cũ nếu tồn tại
            if (myChart) {
                myChart.destroy();
            }

            // Xử lý dữ liệu đầu vào

            const labels = labelsInput.split(',').map(label => label.trim());
            const data = dataInput.split(',').map(value => parseFloat(value.trim()));

            // Canvas để vẽ biểu đồ
            const ctx = document.getElementById('myChart').getContext('2d');

            // Tạo màu ngẫu nhiên
            function generateColors(count) {
                const colors = [];
                const backgroundColors = [];

                for (let i = 0; i < count; i++) {
                    const r = Math.floor(Math.random() * 255);
                    const g = Math.floor(Math.random() * 255);
                    const b = Math.floor(Math.random() * 255);

                    backgroundColors.push(`rgba(${r}, ${g}, ${b}, 0.2)`);
                    colors.push(`rgba(${r}, ${g}, ${b}, 1)`);
                }

                return {
                    backgroundColor: backgroundColors,
                    borderColor: colors
                };
            }

            const colorSet = generateColors(labels.length);

            // Cấu hình tùy chọn dựa trên loại biểu đồ
            const options = {
                responsive: true,
                maintainAspectRatio: true, // Đã sửa: Thay đổi thành true để duy trì tỷ lệ khung hình
                plugins: {
                    legend: {
                        display: showLegend,
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: chartTitle,
                        font: {
                            size: 18
                        }
                    },
                    tooltip: {
                        enabled: true
                    }
                }
            };

            // Thêm tùy chọn scale cho biểu đồ bar và line
            if (['bar', 'line', 'scatter', 'bubble'].includes(chartType)) {
                options.scales = {
                    y: {
                        beginAtZero: true
                    }
                };
            }

            // Đã sửa: Thêm tùy chọn aspectRatio cho biểu đồ tròn
            if (['pie', 'doughnut', 'polarArea'].includes(chartType)) {
                options.aspectRatio = 2; // Tỷ lệ phù hợp cho biểu đồ tròn
            }

            // Dữ liệu chung
            const chartData = {
                labels: labels,
                datasets: [{
                    label: chartTitle,
                    data: data,
                    backgroundColor: colorSet.backgroundColor,
                    borderColor: chartType === 'line' ? colorSet.borderColor[0] : colorSet.borderColor,
                    borderWidth: 1
                }]
            };

            // Cấu hình riêng cho biểu đồ line
            if (chartType === 'line') {
                chartData.datasets[0].fill = false;
                chartData.datasets[0].tension = 0.1;
            }

            // Cấu hình riêng cho biểu đồ scatter và bubble
            if (chartType === 'scatter' || chartType === 'bubble') {
                chartData.datasets[0].pointBackgroundColor = colorSet.backgroundColor;
                chartData.datasets[0].pointBorderColor = colorSet.borderColor;
                chartData.datasets[0].pointRadius = 8;
            }

            // Thêm dữ liệu r (bán kính) nếu là bubble chart
            if (chartType === 'bubble') {
                const radiusData = [];
                for (let i = 0; i < data.length; i++) {
                    radiusData.push(Math.floor(Math.random() * 10) + 5);
                }
                chartData.datasets[0].pointRadius = radiusData;
            }

            // Tạo biểu đồ
            myChart = new Chart(ctx, {
                type: chartType,
                data: chartData,
                options: options
            });
        }

        // Hàm tải xuống biểu đồ
        function downloadChart(format) {
            const canvas = document.getElementById('myChart');
            const chartTitle = document.querySelector('.card-header h4').textContent.trim();
            const filename = `${chartTitle.replace(/\s+/g, '-').toLowerCase()}.${format}`;

            let downloadLink = document.createElement('a');
            downloadLink.href = canvas.toDataURL(`image/${format}`);
            downloadLink.download = filename;
            document.body.appendChild(downloadLink);
            downloadLink.click();
            document.body.removeChild(downloadLink);
        }
    </script>
}